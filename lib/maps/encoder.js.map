{"version":3,"sources":["encoder.coffee"],"names":[],"mappings":"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","file":"encoder.js","sourceRoot":"/source/","sourcesContent":["###\nCopyright (c) 2015 Daniel Fields\n\nPermission is hereby granted, free of charge, to\nany person obtaining a copy of this software and\nassociated documentation files (the \"Software\"),\nto deal in the Software without restriction,\nincluding without limitation the rights to use,\ncopy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is\nfurnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission\nnotice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\nWARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\nAND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n###\n\n\n###\nThis code is based on Alexander Olsson's\n(https://github.com/noseglid) base85 encoder\nmodule (https://github.com/noseglid/base85).\nSome key differences are:\n* The code has been optimized for the hailstone\nuse case.\n* Uses a modified, non-canon alphabet.\n###\n\n\n###\n  A slightly modified RFC 1924 alphabet, to be a\n  bit more URL-friendly. All values are in ASCII\n  order, which shifts the enc table around a bit\n  compared to standard ASCII base85.\n###\n\n_alphabet =\n  enc:\n    0: '!'\n    1: '$'\n    2: '%'\n    3: '('\n    4: ')'\n    5: '*'\n    6: ','\n    7: '-'\n    8: '.'\n    9: '0'\n    10: '1'\n    11: '2'\n    12: '3'\n    13: '4'\n    14: '5'\n    15: '6'\n    16: '7'\n    17: '8'\n    18: '9'\n    19: ';'\n    20: '<'\n    21: '='\n    22: '>'\n    23: '@'\n    24: 'A'\n    25: 'B'\n    26: 'C'\n    27: 'D'\n    28: 'E'\n    29: 'F'\n    30: 'G'\n    31: 'H'\n    32: 'I'\n    33: 'J'\n    34: 'K'\n    35: 'L'\n    36: 'M'\n    37: 'N'\n    38: 'O'\n    39: 'P'\n    40: 'Q'\n    41: 'R'\n    42: 'S'\n    43: 'T'\n    44: 'U'\n    45: 'V'\n    46: 'W'\n    47: 'X'\n    48: 'Y'\n    49: 'Z'\n    50: '['\n    51: ']'\n    52: '^'\n    53: '_'\n    54: '`'\n    55: 'a'\n    56: 'b'\n    57: 'c'\n    58: 'd'\n    59: 'e'\n    60: 'f'\n    61: 'g'\n    62: 'h'\n    63: 'i'\n    64: 'j'\n    65: 'k'\n    66: 'l'\n    67: 'm'\n    68: 'n'\n    69: 'o'\n    70: 'p'\n    71: 'q'\n    72: 'r'\n    73: 's'\n    74: 't'\n    75: 'u'\n    76: 'v'\n    77: 'w'\n    78: 'x'\n    79: 'y'\n    80: 'z'\n    81: '{'\n    82: '|'\n    83: '}'\n    84: '~'\n\ndo () ->\n  _ = require 'lodash'\n  decKeys = _.map(_.values(_alphabet.enc), (v) -> v.charCodeAt(0))\n  decValues = _.map(_.keys(_alphabet.enc), (v) -> parseInt(v))\n  _alphabet.dec = _.zipObject decKeys, decValues\n\nbignum = require 'bignum'\n\nmodule.exports =\n\n  ###\n    Convert a Node Buffer to a hailstone-base85\n    string.\n  ###\n  encode: (buf) ->\n    return (undefined) if !(buf instanceof Buffer)\n    num = bignum.fromBuffer buf\n    len = Math.floor(buf.length / 4) * 5\n    enc = _alphabet.enc\n    val = []\n    i = 0\n    while i < len\n      val.push enc[num.mod(0x55).toNumber()]\n      num = num.div 0x55\n      i++\n    val.reverse().join('')\n\n\n  ###\n    Convert a hailstone-base85 string into a Node\n    Buffer.\n  ###\n  decode: (val) ->\n    return (undefined) if typeof(val) isnt 'string'\n    dec = _alphabet.dec\n    i = 0\n    reduce = (memo, el) ->\n      char = bignum(dec[el.charCodeAt(0)])\n      fact = bignum(0x55).pow i++\n      contrib = char.mul fact\n      memo.add contrib\n    num = val.split('').reduceRight reduce, bignum(0)\n    num.toBuffer()\n"]}