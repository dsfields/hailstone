{"version":3,"sources":["hailstone.coffee"],"names":[],"mappings":"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","file":"hailstone.js","sourceRoot":"/source/","sourcesContent":["###\nCopyright (c) 2015 Daniel Fields\n\nPermission is hereby granted, free of charge, to\nany person obtaining a copy of this software and\nassociated documentation files (the \"Software\"),\nto deal in the Software without restriction,\nincluding without limitation the rights to use,\ncopy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is\nfurnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission\nnotice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT\nWARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\nAND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n###\n\n\n###\n  Node.js's crypto RNG method relies on an pool\n  of entropy values to ensure randomness and\n  distribution. It is indeed possible for the\n  entropy pool can become exhausted.  Node.js\n  crypto will throw an error if this happens. To\n  prevent errors, a callback function parameter\n  is provided, thus allowing calling threads a\n  method to wait in a non-blocking manner for the\n  Node.js crypto to gather sufficient entropy to\n  generate a PRN. This is here to provide a JS\n  promise support.\n###\nPromise = require 'bluebird'\n\n\n###\n  Moderately fast, and very well distributed RNG.\n  More than sufficient for random id generation,\n  and is used most Node-based UUID generators.\n###\n_rng = require('crypto').randomBytes\n\n\n###\n  Native hailstone base85 encoder.\n###\n_encoder = require './encoder'\n\n\n###\n  Take all of the hailstorm identifier values,\n  and stuff them in a Node buffer.\n###\n_createBuffer = (ver, len, dom, et, inst) ->\n  size = len / 8\n  header = (ver - 1) | len \n  buf = new Buffer size\n  buf.writeUInt8 header, 0\n  buf.writeUInt8 dom, 1\n  buf.writeUInt8 et, 2\n  inst.copy buf, 3, 0, inst.length\n  buf\n\n\n###\n  Reads a Node buffer and outputs a JSON object\n  containing the identifier's properties\n  contained therein.\n###\n_readBuffer = (buf) ->\n  buflen = buf.length\n  throw new Error('Invalid buffer length') if buflen isnt 8 and buflen isnt 16\n  meta = buf.readUInt8 0\n  ver = (meta & 0xF) + 1\n  len = meta & 0xC0\n  dom = buf.readUInt8 1\n  et = buf.readUInt8 2\n  size = if len is 64 then 5 else 13\n  inst = new Buffer size\n  buf.copy inst, 0, 3, buflen\n  identifier =\n    version: ver\n    length: len\n    domain: dom\n    type: et\n    instance: inst\n  console.log identifier\n  identifier\n\n\n###\n  Type ids must be an integer value of a\n  particular size.\n###\n_validateTypeId = (value, max, argName) ->\n  valid = value? and typeof(value) is 'number' and value % 1 is 0 and max >= value >= 0\n  if !valid\n    msg = \"Value of #{argName} must be an integer between 0 and #{max}, but was #{value}.\"\n    throw new Error msg\n\n\n###*\n  Create an instance of Hailstone. Represents a\n  quasi-unique identifier that embeds the domain\n  and type information of a target entity\n  instance.\n\n  The domain and type identifiers are represented\n  as 8-bit, unsigned integer values.  Each value\n  is owned by the implementing system.  Thus,\n  hailstone identifiers are not intended to be\n  globally unique.\n\n  @arg {string|Buffer} - a hailstone-base85\n    encoded string or Node Buffer containing a\n    serialized hailstorm identifier.\n###\nclass Hailstone\n  constructor: (value) ->\n    throw new Error('A value must be provided.') if !value?\n    buffer = value if buffer instanceof Buffer\n    buffer = _encoder.decode value if !buffer?\n    throw new Error 'The value must a Buffer or string.' if !buffer?\n    {@version, @length, @domain, @type, @instance} = _readBuffer buffer\n\n\n  ###*\n    Converts the identifier into a Node Buffer.\n  ###\n  toBuffer: () ->\n    _createBuffer @version, @length, @domain, @type, @instance\n\n\n  ###*\n    Converts the identifier into a URL-friendly,\n    base85-encoded string.\n  ###\n  toString: () ->\n    buf = @toBuffer()\n    enc = _encoder.encode buf\n\n\n  ###*\n    Generates a random, quasi-unique identifier\n    for the specified domain and type.\n\n    @arg {number} domain - The domain identifer.\n    Must be an 8-bit value.\n    @arg {number} type - The type identifier.\n    Must be an 8-bit value.\n    @arg {Object} [options] - Options\n    @arg {number} [options.length] - Total length\n    of the identifer. Can be 64 or 128.\n    @arg {requestCallback} [callback] - Requester\n    callback.\n  ###\n  @create: (domain, type, options, callback) ->\n    _validateTypeId domain, 0xFF, 'domain'\n    _validateTypeId type, 0xFF, 'type'\n    len = options?.length ? 128\n    throw new Error('Length must be 64 or 128') if len isnt 64 and len isnt 128\n    size = if len is 64 then 5 else 13\n    cb = callback\n    dom = domain\n    et = type\n    if cb?\n      _rng size, (err, result) ->\n        if err\n          cb err\n        else\n          buf = _createBuffer 1, len, dom, et, result\n          enc = _encoder.encode buf\n          cb null, enc\n    else\n      val = _rng size\n      buf = _createBuffer 1, len, dom, et, val\n      enc = _encoder.encode buf\n    enc\n\n\n  ###*\n    Promisified version of {Identifier#create}.\n    Generates a random, quasi-unique identifier\n    for the specified domain and type.\n\n    @arg {number} domain - The domain identifer.\n    Must be an 8-bit value.\n    @arg {number} type - The type identifier.\n    Must be an 8-bit value.\n    @arg {Object} [options] - Options\n    @arg {number} [options.length] - Total length\n    of the identifer. Can be 64 or 128.\n  ###\n  @createAsync: (domain, type, options) ->\n    d = domain\n    et = type\n    sm = small\n    promise = new Promise (resolve, reject) ->\n      res = resolve\n      rej = reject\n      @create d, et, sm, (err, result) ->\n        if err?\n          rej err\n        else\n          res result\n\nmodule.exports = Hailstone\n"]}